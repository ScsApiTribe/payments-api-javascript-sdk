/**
 * Payments
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 5.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/PaymentRequest', 'model/Error', 'model/PaymentStatus', 'model/PaymentDetails', 'model/PaymentsCollection'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/PaymentRequest'), require('../model/Error'), require('../model/PaymentStatus'), require('../model/PaymentDetails'), require('../model/PaymentsCollection'));
  } else {
    // Browser globals (root is window)
    if (!root.SwisscomPaymentsJavascriptSdk) {
      root.SwisscomPaymentsJavascriptSdk = {};
    }
    root.SwisscomPaymentsJavascriptSdk.DefaultApi = factory(root.SwisscomPaymentsJavascriptSdk.ApiClient, root.SwisscomPaymentsJavascriptSdk.PaymentRequest, root.SwisscomPaymentsJavascriptSdk.Error, root.SwisscomPaymentsJavascriptSdk.PaymentStatus, root.SwisscomPaymentsJavascriptSdk.PaymentDetails, root.SwisscomPaymentsJavascriptSdk.PaymentsCollection);
  }
}(this, function(ApiClient, PaymentRequest, Error, PaymentStatus, PaymentDetails, PaymentsCollection) {
  'use strict';

  /**
   * Default service.
   * @module api/DefaultApi
   * @version 5.0.17
   */

  /**
   * Constructs a new DefaultApi. 
   * @alias module:api/DefaultApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createPayment operation.
     * @callback module:api/DefaultApi~createPaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * #### Makes a payment transaction #### Allows to charge or refund an amount to the end user&#39;s bill. When creating a payment, specify the actual transactions details like idempotencyKey, amount and description. Please note that the description must be encoded in ISO-8859-1 charset. 
     * @param {String} sCSVersion The version of the API, value must be \&quot;**&lt;&lt;SCS-Version&gt;&gt;**\&quot;.  This header indicates which version of the API should serve the request. If the value of the header is missing or it indicates a wrong version, the API returns an error message. 
     * @param {module:model/PaymentRequest} paymentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} opts.sCSRequestID The request ID.  It is used by the API to trace the fulfillment of a request. The API user may provide its own request ID or can accept the request ID generated by the API. In both cases the request ID is returned in the header of the response.  This ID should be refered by the API users in their communication with Swisscom whenever requesting details about the execution of a request. 
     * @param {module:api/DefaultApi~createPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentStatus}
     */
    this.createPayment = function(sCSVersion, paymentRequest, opts, callback) {
      opts = opts || {};
      var postBody = paymentRequest;

      // verify the required parameter 'sCSVersion' is set
      if (sCSVersion == undefined || sCSVersion == null) {
        throw "Missing the required parameter 'sCSVersion' when calling createPayment";
      }

      // verify the required parameter 'paymentRequest' is set
      if (paymentRequest == undefined || paymentRequest == null) {
        throw "Missing the required parameter 'paymentRequest' when calling createPayment";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'SCS-Request-ID': opts['sCSRequestID'],
        'SCS-Version': sCSVersion
      };
      var formParams = {
      };

      var authNames = ['oauth_2_0_authorization_code', 'oauth_2_0_client_credentials'];
      var contentTypes = ['application/json; charset=ISO-8859-1'];
      var accepts = ['application/json'];
      var returnType = PaymentStatus;

      return this.apiClient.callApi(
        '/payments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayment operation.
     * @callback module:api/DefaultApi~getPaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * #### Returns the payment transaction details #### Allows to retrieve the details of a payment represented by the payment identifier provided as the parameter. The payment identifier is the identifier which is returned with the location header in the response for POST payment.  The payment details and the status of the payment transaction can be retrieved from the response. 
     * @param {String} paymentId The unique identifier of a payment transaction. This is the same identifier which is returned with the location header of the response in the POST payment.  The value of the URI parameter must not contain spaces and should be URL encoded. 
     * @param {String} sCSVersion The version of the API, value must be \&quot;**&lt;&lt;SCS-Version&gt;&gt;**\&quot;.  This header indicates which version of the API should serve the request. If the value of the header is missing or it indicates a wrong version, the API returns an error message. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.sCSRequestID The request ID.  It is used by the API to trace the fulfillment of a request. The API user may provide its own request ID or can accept the request ID generated by the API. In both cases the request ID is returned in the header of the response.  This ID should be refered by the API users in their communication with Swisscom whenever requesting details about the execution of a request. 
     * @param {module:api/DefaultApi~getPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentDetails}
     */
    this.getPayment = function(paymentId, sCSVersion, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'paymentId' is set
      if (paymentId == undefined || paymentId == null) {
        throw "Missing the required parameter 'paymentId' when calling getPayment";
      }

      // verify the required parameter 'sCSVersion' is set
      if (sCSVersion == undefined || sCSVersion == null) {
        throw "Missing the required parameter 'sCSVersion' when calling getPayment";
      }


      var pathParams = {
        'paymentId': paymentId
      };
      var queryParams = {
      };
      var headerParams = {
        'SCS-Request-ID': opts['sCSRequestID'],
        'SCS-Version': sCSVersion
      };
      var formParams = {
      };

      var authNames = ['oauth_2_0_authorization_code', 'oauth_2_0_client_credentials'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PaymentDetails;

      return this.apiClient.callApi(
        '/payments/{paymentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchPayments operation.
     * @callback module:api/DefaultApi~searchPaymentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentsCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * #### Search Payment Transactions #### Provides the capability to search for payment transactions based on a customer identifier. 
     * @param {String} scn The Swisscom customer number (SCN) that uniquely identifies a customer.  Performing the request with this query parameter returns the list of payment transactions made on the Swisscom bill of the customer represented by the identifier. 
     * @param {String} sCSVersion The version of the API, value must be \&quot;**&lt;&lt;SCS-Version&gt;&gt;**\&quot;.  This header indicates which version of the API should serve the request. If the value of the header is missing or it indicates a wrong version, the API returns an error message. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.dateFrom Defines the date range of the returned transactions. The date has to be in format yyyy-mm-dd.
     * @param {String} opts.dateTo Defines the date range of the returned transactions. The date has to be in format yyyy-mm-dd.
     * @param {String} opts.sCSRequestID The request ID.  It is used by the API to trace the fulfillment of a request. The API user may provide its own request ID or can accept the request ID generated by the API. In both cases the request ID is returned in the header of the response.  This ID should be refered by the API users in their communication with Swisscom whenever requesting details about the execution of a request. 
     * @param {module:api/DefaultApi~searchPaymentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentsCollection}
     */
    this.searchPayments = function(scn, sCSVersion, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'scn' is set
      if (scn == undefined || scn == null) {
        throw "Missing the required parameter 'scn' when calling searchPayments";
      }

      // verify the required parameter 'sCSVersion' is set
      if (sCSVersion == undefined || sCSVersion == null) {
        throw "Missing the required parameter 'sCSVersion' when calling searchPayments";
      }


      var pathParams = {
      };
      var queryParams = {
        'scn': scn,
        'dateFrom': opts['dateFrom'],
        'dateTo': opts['dateTo']
      };
      var headerParams = {
        'SCS-Request-ID': opts['sCSRequestID'],
        'SCS-Version': sCSVersion
      };
      var formParams = {
      };

      var authNames = ['oauth_2_0_authorization_code', 'oauth_2_0_client_credentials'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PaymentsCollection;

      return this.apiClient.callApi(
        '/payments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
